import type { ConnectMiddleware } from "../middlewareAdapter";
import type { Callbacks, StreamCallbacks } from "./callbacks";

/**
 * Configuration contract for the high-level `createServer` helper. The helper
 * spins up both the JSON-based handler and (optionally) the streaming HTML
 * handler so you can preview SSR output during development.
 *
 * Generics:
 *  - `TContext` â€“ shape of the per-request context object produced by
 *    {@link Callbacks.setup}.
 */
export interface CreateServerOptions<
  TContext extends Record<string, any> = Record<string, any>,
> extends Callbacks<TContext> {
  /** TCP port the Express/Bun server should bind to. */
  port: number;

  /**
   * Optional streaming-specific hooks. When omitted the server will only
   * expose the JSON endpoint generated by {@link createHandler}.
   */
  streamCallbacks?: StreamCallbacks<TContext>;

  /**
   * Attach a Connect-compatible middleware (e.g. `vite.middlewares`) as a
   * catch-all route ("/*") in the Bun server. Handy when you want to serve
   * Vite's server alongside the JSON/streaming endpoints without having
   * to mutate the returned `Bun.Server` instance manually.
   */
  middleware?: ConnectMiddleware;
}

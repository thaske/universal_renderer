import type { Callbacks, StreamCallbacks } from "./callbacks";

/**
 * Configuration contract for the high-level `createServer` helper. The helper
 * spins up both the JSON-based handler and (optionally) the streaming HTML
 * handler so you can preview SSR output during development.
 *
 * Generics:
 *  - `TContext` – shape of the per-request context object produced by
 *    {@link Callbacks.setup}.
 *  - `TRenderOutput` – type of the JSON payload returned by
 *    {@link Callbacks.render} when *not* using streaming.
 */
export interface CreateServerOptions<
  TContext extends Record<string, any> = Record<string, any>,
  TRenderOutput extends Record<string, any> = Record<string, any>,
> {
  /** TCP port the Express/Bun server should bind to. */
  port: number;

  /** Mandatory set of lifecycle callbacks shared by both handlers. */
  callbacks: Callbacks<TContext, TRenderOutput>;

  /**
   * Optional streaming-specific hooks. When omitted the server will only
   * expose the JSON endpoint generated by {@link createHandler}.
   */
  streamCallbacks?: StreamCallbacks<TContext>;
}
